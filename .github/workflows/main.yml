name: Deploy
on:
  push:
    branches:
      - main
env:
  DOCKER_IMAGE: ghcr.io/${{ secrets.actor }}/spring-backend:latest
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./demo
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
        
      - name: Create application.yaml for CD Deploy
        run: |
          echo "${{ secrets.PRODUCTION_ENV }}" > .env
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      ## gradle build
      - name: Build with Gradle
        run: |
          ls
          ./gradlew clean build -x test
          
      ## docker build & push to production
      - name: Docker build & push to prod
        working-directory: .
        run: |
          docker login ghcr.io -u ${{ secrets.actor }} -p ${{ secrets.GHCR_TOKEN }}
          docker buildx create --name arm64builder --use
          docker buildx build --platform linux/amd64,linux/arm64 -f demo/Dockerfile -t ghcr.io/${{ secrets.actor }}/spring-backend:latest --push .
          docker logout
          
  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-spring-test ]
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.HOST_IP }}
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }}
        port: 22
        script: |
          cd /home/ec2-user/spring-deploy-test
          docker-compose down
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.actor }} --password-stdin
          docker pull ${{ env.DOCKER_IMAGE }}
          docker image prune -f
          docker logout
          docker-compose up -d
